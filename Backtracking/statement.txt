These are some basic backtracking algorithms.

>>> Cartezian product of multiple lists. (iterative)

Say we have lists [1,2], [3,4], [5,6] and we want to return the cartezian product:
[1,3,5], [1,3,6], [1,4,5], [1,4,6], [2,3,5], [2,3,6], [2,4,5], [2,4,6]

The idea behind the iterative solution would be a BFS approach:
-initialize the result with [[]]
-first we remove the empty list and add the elements from the first set to the result: [[1],[2]]
-to each of the lists in result, we add each of the elements from the coming list: [[1,3], [1,4], [2,3], [2,4]]
Remember to remove original elements.
-continue untill the cartezian product is generated

Note: addition of lists in python seems to create deep copies.

>>> Cartezian product of multiple lists. (recursive)

The idea behind the recursive solution would be the following:
-the function takes as argument a list of sets
-if the argument is an empty list, return [[]]
-otherwise, take the first element of the set, and combine each one with the output of CartezianProduct(sets.pop(0))

eg: each element in [3,4] would be added to each of the lists in CartezianProduct([[5,6]]), so that would be
[[3,5], [3,6], [4,5], [4,6]]


>>> Permutation of a string (iterative)

This is very similar to the bfs algorithm used above for backtracking. The only difference is when updating the
list with results. To generate all permutations correctly, we must also check if the new letter we add was
already present or not in the permutation we add the letter to. This will compromize the complexity.